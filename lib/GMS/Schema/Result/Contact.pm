use utf8;
package GMS::Schema::Result::Contact;

# Created by DBIx::Class::Schema::Loader
# DO NOT MODIFY THE FIRST PART OF THIS FILE

=head1 NAME

GMS::Schema::Result::Contact

=cut

use strict;
use warnings;

use base 'DBIx::Class::Core';

=head1 TABLE: C<contacts>

=cut

__PACKAGE__->table("contacts");

=head1 ACCESSORS

=head2 id

  data_type: 'integer'
  is_auto_increment: 1
  is_nullable: 0
  sequence: 'contacts_id_seq'

=head2 account_id

  data_type: 'integer'
  is_foreign_key: 1
  is_nullable: 0

=head2 active_change

  data_type: 'integer'
  default_value: -1
  is_foreign_key: 1
  is_nullable: 0

=head2 name

  data_type: 'varchar'
  is_nullable: 0
  size: 255

=head2 phone

  data_type: 'varchar'
  is_nullable: 1
  size: 32

=head2 email

  data_type: 'varchar'
  is_nullable: 0
  size: 255

=cut

__PACKAGE__->add_columns(
  "id",
  {
    data_type         => "integer",
    is_auto_increment => 1,
    is_nullable       => 0,
    sequence          => "contacts_id_seq",
  },
  "account_id",
  {
    data_type      => "integer",
    is_foreign_key => 1,
    is_nullable    => 0,
  },
  "active_change",
  {
    data_type      => "integer",
    default_value  => -1,
    is_foreign_key => 1,
    is_nullable    => 0,
  },
  "name",
  { data_type => "varchar", is_nullable => 0, size => 255 },
  "phone",
  { data_type => "varchar", is_nullable => 1, size => 32 },
  "email",
  { data_type => "varchar", is_nullable => 0, size => 255 },
);

=head1 PRIMARY KEY

=over 4

=item * L</id>

=back

=cut

__PACKAGE__->set_primary_key("id");

=head1 UNIQUE CONSTRAINTS

=head2 C<unique_account>

=over 4

=item * L</account_id>

=back

=cut

__PACKAGE__->add_unique_constraint("unique_account", ["account_id"]);

=head2 C<unique_contact_active_change>

=over 4

=item * L</active_change>

=back

=cut

__PACKAGE__->add_unique_constraint("unique_contact_active_change", ["active_change"]);

=head1 RELATIONS

=head2 account

Type: belongs_to

Related object: L<GMS::Schema::Result::Account>

=cut

__PACKAGE__->belongs_to(
  "account",
  "GMS::Schema::Result::Account",
  { id => "account_id" },
  { is_deferrable => 1, on_delete => "CASCADE", on_update => "CASCADE" },
);

=head2 active_change

Type: belongs_to

Related object: L<GMS::Schema::Result::ContactChange>

=cut

__PACKAGE__->belongs_to(
  "active_change",
  "GMS::Schema::Result::ContactChange",
  { id => "active_change" },
  { is_deferrable => 1, on_delete => "NO ACTION", on_update => "NO ACTION" },
);

=head2 contact_changes

Type: has_many

Related object: L<GMS::Schema::Result::ContactChange>

=cut

__PACKAGE__->has_many(
  "contact_changes",
  "GMS::Schema::Result::ContactChange",
  { "foreign.contact_id" => "self.id" },
  { cascade_copy => 0, cascade_delete => 0 },
);

=head2 group_contacts

Type: has_many

Related object: L<GMS::Schema::Result::GroupContact>

=cut

__PACKAGE__->has_many(
  "group_contacts",
  "GMS::Schema::Result::GroupContact",
  { "foreign.contact_id" => "self.id" },
  { cascade_copy => 0, cascade_delete => 0 },
);


# Created by DBIx::Class::Schema::Loader v0.07035 @ 2013-07-07 14:42:30
# DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum:akTYtawcF/XNT8paJmoYgw
# You can replace this text with custom content, and it will be preserved on regeneration

__PACKAGE__->load_components("InflateColumn::DateTime", "InflateColumn::Object::Enum");

# Not auto-generated by Schema::Loader...
__PACKAGE__->many_to_many(groups => 'group_contacts', 'group');

=head1 METHODS

=head2 new

Constructor. Automatically creates a ContactChange with the initial state of the
Contact.

=cut

sub new {
    my ($class, $args) = @_;

    my @change_arg_names = (
        'name', 'email', 'phone', 'change_freetext'
    );

    my %change_args;
    @change_args{@change_arg_names} = @{$args}{@change_arg_names};
    $change_args{change_type} = 'create';
    $change_args{changed_by} = $args->{account_id};

    $args->{contact_changes} = [ \%change_args ];

    delete $args->{'change_freetext'};

    return $class->next::method($args);
}

=head2 insert

Inserts this record into the database, along with its automatically-created
ContactChange.

=cut

sub insert {
    my ($self) = @_;
    my $ret;
    my $next_method = $self->next::can;

    $self->result_source->storage->with_deferred_fk_checks(sub {
            $ret = $self->$next_method();
            $self->active_change($self->contact_changes->single);
            $self->update;
        });

    return $ret;
}

=head2 change

    $contact->change($account, $changetype, \%args);

Creates a related ContactChange with the modifications specified in %args.
Unchanged fields are populated from the contact's current state.

$account and $changetype are the account making this change and the type of
change (create, request, approve or admin).

=cut

sub change {
    my ($self, $account, $change_type, $args) = @_;

    my $active_change = $self->active_change;
    my $last_change = $self->last_change;
    my $change;

    if ($last_change->change_type->is_request) {
        $change = $last_change;
    } else {
        $change = $active_change;
    }

    my %change_args = (
        changed_by => $account,
        change_type => $change_type,
        name => defined $args->{name} ? $args->{name} : $change->name,
        phone => defined $args->{phone} ? $args->{phone} : $change->phone,
        email => defined $args->{email} ? $args->{email} : $change->email,
        change_freetext => $args->{change_freetext}
    );

    my $ret = $self->add_to_contact_changes(\%change_args);

    if ($change_type ne 'request') {
        $self->active_change($ret);

        $self->name($change_args{name});
        $self->phone($change_args{phone});
        $self->email($change_args{email});
    }

    $self->update;
    return $ret;
}

=head2 last_change

Returns the most recent change for the contact.

=cut

sub last_change {
    my ($self) = @_;

    my @changes = $self->contact_changes->search({ }, { 'order_by' => { -desc => 'id' } });

    return $changes[0];
}

1;
